//Coding Train Challenge by Dan Shiffman
//Link to Video: https://www.youtube.com/watch?v=FWSR_7kZuYg

function make2DArray(cols, rows) {
  let arr = new Array(cols);
  for (let i = 0; i < arr.length; i++) {
    arr[i] = Array(rows);
  }
  return arr;
}

let r = 0;
let g = 0;
let b = 0;

let grid;
let cols;
let rows;
let resolution = 10;

let slider; 

let speedY = 4;

function setup() {
  createCanvas(600, 600);
  
  resetSketch();
  
  let button = createButton("Start Life Over");
  button.mousePressed(resetSketch);
}

function resetSketch(){
  r = random(255);
  g = random(255);
  b = random(255);
  
  cols = width / resolution;
  rows = height / resolution;

  grid = make2DArray(cols, rows);
  for (let i = 0; i < cols; i++) {
    for (let j = 0; j < rows; j++) {
      grid[i][j] = floor(random(2));
    }
  }
  console.table(grid);
  
  slider = createSlider(2, 8, 4, 1);
  slider.position(250,575);
  console.log(frameCount);

}

      function mousePressed() {
        noLoop();
      }
      
      function mouseReleased() {
        loop();
      }

function draw() {
  background(0);
  
   
  speedY = slider.value();
  frameRate(speedY);
    
  r = random(255);
  g = random(255);
  b = random(255);

  for (let i = 0; i < cols; i++) {
    for (let j = 0; j < rows; j++) {
      let x = i * resolution;
      let y = j * resolution;

      if (grid[i][j] == 1) {
        fill(r,b,g);
        stroke(0);
        rect(x, y, resolution - 1, resolution - 1);
      }
    }
  }

  let next = make2DArray(cols, rows);
  // Compute next based on grid > then render and repeat

  for (let i = 0; i < cols; i++) {
    for (let j = 0; j < rows; j++) {
      let state = grid[i][j];

      //Edges  
      // if(i == 0 || i == cols -1 || j == 0 || j == rows - 1){
      //   next[i][j] = state;
      // } else {

      // Count live neighbors!
      let sum = 0;
      let neighbors = countNeighbors(grid, i, j);

      if (state == 0 && neighbors == 3) {
        next[i][j] = 1;
      } else if (state == 1 && neighbors < 2 || neighbors > 3) {
        next[i][j] = 0;
      } else {
        next[i][j] = state;
      }
      // if (state == 1 && neighbors == 2 || 3){
      //   next[i][j] = 0;
      // }
      //       sum =+ grid[i-1][j-1];
      //       sum =+ grid[i][j-1];
      //       sum =+ grid[i+1][j-1];
      //       sum =+ grid[i-1][j];
      //       sum =+ grid[i+1][j];
      //       sum =+ grid[i-1][j+1];
      //       sum =+ grid[i][j+1];
      //       sum =+ grid[i+1][j+1];
      //       if(2<sum<3){
      //         grid[i][j] = 0;
      //       }
      //       if(sum == 2){
      //         grid[i][j] = 1;
      //       }
      //       if(next[i-1][j-1]){
      //          }

      // }
    }
  }
  grid = next;


fill("red");
  textSize(24);
  text("Cycle Count:" + frameCount, 30, 30);



}

function countNeighbors(grid, x, y) {
  let sum = 0;
  for (let i = -1; i < 2; i++) {
    for (let j = -1; j < 2; j++) {

      let col = (x + i + cols) % cols;
      let row = (y + j + rows) % rows;

      sum += grid[col][row];
    }
  }
  sum -= grid[x][y];
  return sum;

}